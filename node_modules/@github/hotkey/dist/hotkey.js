import { macosSymbolLayerKeys } from './macos-symbol-layer.js';
import { macosUppercaseLayerKeys } from './macos-uppercase-layer.js';
const normalizedHotkeyBrand = Symbol('normalizedHotkey');
const syntheticKeyNames = {
    ' ': 'Space',
    '+': 'Plus'
};
export function eventToHotkeyString(event, platform = navigator.platform) {
    var _a, _b, _c;
    const { ctrlKey, altKey, metaKey, shiftKey, key } = event;
    const hotkeyString = [];
    const modifiers = [ctrlKey, altKey, metaKey, shiftKey];
    for (const [i, mod] of modifiers.entries()) {
        if (mod)
            hotkeyString.push(modifierKeyNames[i]);
    }
    if (!modifierKeyNames.includes(key)) {
        const altNormalizedKey = hotkeyString.includes('Alt') && matchApplePlatform.test(platform) ? (_a = macosSymbolLayerKeys[key]) !== null && _a !== void 0 ? _a : key : key;
        const shiftNormalizedKey = hotkeyString.includes('Shift') && matchApplePlatform.test(platform)
            ? (_b = macosUppercaseLayerKeys[altNormalizedKey]) !== null && _b !== void 0 ? _b : altNormalizedKey
            : altNormalizedKey;
        const syntheticKey = (_c = syntheticKeyNames[shiftNormalizedKey]) !== null && _c !== void 0 ? _c : shiftNormalizedKey;
        hotkeyString.push(syntheticKey);
    }
    return hotkeyString.join('+');
}
const modifierKeyNames = ['Control', 'Alt', 'Meta', 'Shift'];
export function normalizeHotkey(hotkey, platform) {
    let result;
    result = localizeMod(hotkey, platform);
    result = sortModifiers(result);
    return result;
}
const matchApplePlatform = /Mac|iPod|iPhone|iPad/i;
function localizeMod(hotkey, platform) {
    var _a;
    const ssrSafeWindow = typeof window === 'undefined' ? undefined : window;
    const safePlatform = (_a = platform !== null && platform !== void 0 ? platform : ssrSafeWindow === null || ssrSafeWindow === void 0 ? void 0 : ssrSafeWindow.navigator.platform) !== null && _a !== void 0 ? _a : '';
    const localModifier = matchApplePlatform.test(safePlatform) ? 'Meta' : 'Control';
    return hotkey.replace('Mod', localModifier);
}
function sortModifiers(hotkey) {
    const key = hotkey.split('+').pop();
    const modifiers = [];
    for (const modifier of ['Control', 'Alt', 'Meta', 'Shift']) {
        if (hotkey.includes(modifier)) {
            modifiers.push(modifier);
        }
    }
    if (key)
        modifiers.push(key);
    return modifiers.join('+');
}
