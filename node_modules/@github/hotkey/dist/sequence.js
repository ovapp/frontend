import { eventToHotkeyString, normalizeHotkey } from './hotkey.js';
export const SEQUENCE_DELIMITER = ' ';
const sequenceBrand = Symbol('sequence');
export class SequenceTracker {
    constructor({ onReset } = {}) {
        this._path = [];
        this.timer = null;
        this.onReset = onReset;
    }
    get path() {
        return this._path;
    }
    get sequence() {
        return this._path.join(SEQUENCE_DELIMITER);
    }
    registerKeypress(event) {
        this._path = [...this._path, eventToHotkeyString(event)];
        this.startTimer();
    }
    reset() {
        var _a;
        this.killTimer();
        this._path = [];
        (_a = this.onReset) === null || _a === void 0 ? void 0 : _a.call(this);
    }
    killTimer() {
        if (this.timer != null) {
            window.clearTimeout(this.timer);
        }
        this.timer = null;
    }
    startTimer() {
        this.killTimer();
        this.timer = window.setTimeout(() => this.reset(), SequenceTracker.CHORD_TIMEOUT);
    }
}
SequenceTracker.CHORD_TIMEOUT = 1500;
export function normalizeSequence(sequence) {
    return sequence
        .split(SEQUENCE_DELIMITER)
        .map(h => normalizeHotkey(h))
        .join(SEQUENCE_DELIMITER);
}
